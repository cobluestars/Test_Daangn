"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/posts/[id]";
exports.ids = ["pages/api/posts/[id]"];
exports.modules = {

/***/ "aws-sdk":
/*!**************************!*\
  !*** external "aws-sdk" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("aws-sdk");

/***/ }),

/***/ "uuid":
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/***/ ((module) => {

module.exports = import("uuid");;

/***/ }),

/***/ "(api)/./src/lib/dynamoDB.ts":
/*!*****************************!*\
  !*** ./src/lib/dynamoDB.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var aws_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! aws-sdk */ \"aws-sdk\");\n/* harmony import */ var aws_sdk__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(aws_sdk__WEBPACK_IMPORTED_MODULE_0__);\n// /src/lib/dynamoDB.ts\n\naws_sdk__WEBPACK_IMPORTED_MODULE_0___default().config.update({\n    region: process.env.AWS_REGION,\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY\n});\nconst dynamoDb = new (aws_sdk__WEBPACK_IMPORTED_MODULE_0___default().DynamoDB.DocumentClient)();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (dynamoDb);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbGliL2R5bmFtb0RCLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHVCQUF1QjtBQUVHO0FBRTFCQSw0REFBaUIsQ0FBQztJQUNkRyxNQUFNLEVBQUVDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxVQUFVO0lBQzlCQyxXQUFXLEVBQUVILE9BQU8sQ0FBQ0MsR0FBRyxDQUFDRyxpQkFBaUI7SUFDMUNDLGVBQWUsRUFBRUwsT0FBTyxDQUFDQyxHQUFHLENBQUNLLHFCQUFxQjtDQUNyRCxDQUFDLENBQUM7QUFFSCxNQUFNQyxRQUFRLEdBQUcsSUFBSVgsd0VBQTJCLEVBQUU7QUFFbEQsaUVBQWVXLFFBQVEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Rlc3RfZGFhbmduLy4vc3JjL2xpYi9keW5hbW9EQi50cz9lNzVlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIC9zcmMvbGliL2R5bmFtb0RCLnRzXHJcblxyXG5pbXBvcnQgQVdTIGZyb20gJ2F3cy1zZGsnO1xyXG5cclxuQVdTLmNvbmZpZy51cGRhdGUoe1xyXG4gICAgcmVnaW9uOiBwcm9jZXNzLmVudi5BV1NfUkVHSU9OLFxyXG4gICAgYWNjZXNzS2V5SWQ6IHByb2Nlc3MuZW52LkFXU19BQ0NFU1NfS0VZX0lELFxyXG4gICAgc2VjcmV0QWNjZXNzS2V5OiBwcm9jZXNzLmVudi5BV1NfU0VDUkVUX0FDQ0VTU19LRVlcclxufSk7XHJcblxyXG5jb25zdCBkeW5hbW9EYiA9IG5ldyBBV1MuRHluYW1vREIuRG9jdW1lbnRDbGllbnQoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGR5bmFtb0RiOyJdLCJuYW1lcyI6WyJBV1MiLCJjb25maWciLCJ1cGRhdGUiLCJyZWdpb24iLCJwcm9jZXNzIiwiZW52IiwiQVdTX1JFR0lPTiIsImFjY2Vzc0tleUlkIiwiQVdTX0FDQ0VTU19LRVlfSUQiLCJzZWNyZXRBY2Nlc3NLZXkiLCJBV1NfU0VDUkVUX0FDQ0VTU19LRVkiLCJkeW5hbW9EYiIsIkR5bmFtb0RCIiwiRG9jdW1lbnRDbGllbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./src/lib/dynamoDB.ts\n");

/***/ }),

/***/ "(api)/./src/lib/posts.ts":
/*!**************************!*\
  !*** ./src/lib/posts.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"createPost\": () => (/* binding */ createPost),\n/* harmony export */   \"deletePost\": () => (/* binding */ deletePost),\n/* harmony export */   \"getAllPosts\": () => (/* binding */ getAllPosts),\n/* harmony export */   \"getPost\": () => (/* binding */ getPost),\n/* harmony export */   \"getPostsByCategoryAndPage\": () => (/* binding */ getPostsByCategoryAndPage),\n/* harmony export */   \"incrementPostViews\": () => (/* binding */ incrementPostViews),\n/* harmony export */   \"searchPosts\": () => (/* binding */ searchPosts),\n/* harmony export */   \"updatePost\": () => (/* binding */ updatePost)\n/* harmony export */ });\n/* harmony import */ var _dynamoDB__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./dynamoDB */ \"(api)/./src/lib/dynamoDB.ts\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuid */ \"uuid\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([uuid__WEBPACK_IMPORTED_MODULE_1__]);\nuuid__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// /src/lib/posts.ts\n\n\n// 게시글 생성\nconst createPost = async (title, content, category)=>{\n    const id = (0,uuid__WEBPACK_IMPORTED_MODULE_1__.v4)();\n    const params = {\n        TableName: \"PostsTable\",\n        Item: {\n            id: id,\n            title,\n            content,\n            category,\n            views: 0,\n            createdAt: new Date().toISOString()\n        }\n    };\n    try {\n        await _dynamoDB__WEBPACK_IMPORTED_MODULE_0__[\"default\"].put(params).promise();\n        return id; //생성된 게시글의 id 반환\n    } catch (error) {\n        console.error(error);\n        throw new Error(\"게시글 생성 중 에러 발생: Error creating post\");\n    }\n};\n// 모든 게시물을 조회하는 함수\nconst getAllPosts = async ()=>{\n    const params = {\n        TableName: \"PostsTable\"\n    };\n    try {\n        const result = await _dynamoDB__WEBPACK_IMPORTED_MODULE_0__[\"default\"].scan(params).promise();\n        return {\n            items: result.Items\n        };\n    } catch (error) {\n        console.error(error);\n        throw new Error(\"게시글 조회 중 에러 발생: Error fetching all posts\");\n    }\n};\n// 특정 게시글 조회 및 조회수 업데이트\nconst getPost = async (id)=>{\n    const getParams = {\n        TableName: \"PostsTable\",\n        Key: {\n            id\n        }\n    };\n    try {\n        const result = await _dynamoDB__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(getParams).promise();\n        if (result.Item) {\n            //조회수 업데이트 로직\n            return result.Item;\n        } else {\n            return null;\n        }\n    } catch (error) {\n        console.error(error);\n        throw new Error(\"게시글 조회 중 에러 발생: Error fetching post\");\n    }\n};\n//카테고리별 게시글 가져오기 / 페이징 (추후 구현)\nconst getPostsByCategoryAndPage = async (category)=>{\n    const params = {\n        TableName: \"PostsTable\",\n        IndexName: \"category-index\",\n        KeyConditionExpression: \"category = :category\",\n        ExpressionAttributeValues: {\n            \":category\": category\n        },\n        ScanIndexForward: true // 결과를 오름차순으로 정렬\n    };\n    try {\n        const result = await _dynamoDB__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(params).promise();\n        return {\n            items: result.Items\n        };\n    } catch (error) {\n        console.error(error);\n        throw new Error(\"카테고리별 게시글 조회 중 에러 발생: Error fetching posts by category\");\n    }\n};\n// 조회수 업데이트\nconst incrementPostViews = async (id)=>{\n    const updateviewsParams = {\n        TableName: \"PostsTable\",\n        Key: {\n            id\n        },\n        UpdateExpression: \"set #views = #views + :val\",\n        ExpressionAttributeNames: {\n            \"#views\": \"views\" //views라는 실제 속성 이름을 '#views'라는 별칭으로 매핑\n        },\n        ExpressionAttributeValues: {\n            \":val\": 1\n        },\n        ReturnValues: \"UPDATED_NEW\"\n    };\n    try {\n        await _dynamoDB__WEBPACK_IMPORTED_MODULE_0__[\"default\"].update(updateviewsParams).promise();\n    } catch (error) {\n        console.error(error);\n        throw new Error(\"조회수 업데이트 중 에러 발생: Error updating views\");\n    }\n};\n// 게시글 업데이트\nconst updatePost = async (id, title, content)=>{\n    const params = {\n        TableName: \"PostsTable\",\n        Key: {\n            id\n        },\n        UpdateExpression: \"set title = :title, content = :content\",\n        ExpressionAttributeValues: {\n            \":title\": title,\n            \":content\": content\n        },\n        ReturnValues: \"UPDATED_NEW\"\n    };\n    try {\n        await _dynamoDB__WEBPACK_IMPORTED_MODULE_0__[\"default\"].update(params).promise();\n    } catch (error) {\n        console.error(error);\n        throw new Error(\"게시글 업데이트 중 에러 발생: Error updating post\");\n    }\n};\n// 게시글 삭제\nconst deletePost = async (id)=>{\n    const params = {\n        TableName: \"PostsTable\",\n        Key: {\n            id\n        }\n    };\n    try {\n        await _dynamoDB__WEBPACK_IMPORTED_MODULE_0__[\"default\"][\"delete\"](params).promise();\n    } catch (error) {\n        console.error(error);\n        throw new Error(\"게시글 삭제 중 에러 발생: Error deleting post\");\n    }\n};\n// 게시글 검색\n/** (만일 사용자 이벤트 데이터뿐만 아니라 posts도 대규모 데이터셋을 이용할 시,\r\n *  'scan'은 테이블 전체를 스캔하므로 성능 저하 우려.\r\n *  이 때 'scan' 대신, 글로벌 보조 인덱스(GSI)와 함께 'query' 연산 사용) */ const searchPosts = async (keyword)=>{\n    const params = {\n        TableName: \"PostsTable\",\n        FilterExpression: \"contains(title, :keyword) or contains(content, :keyword)\",\n        ExpressionAttributeValues: {\n            \":keyword\": keyword\n        }\n    };\n    try {\n        const result = await _dynamoDB__WEBPACK_IMPORTED_MODULE_0__[\"default\"].scan(params).promise();\n        return {\n            items: result.Items\n        };\n    } catch (error) {\n        console.error(error);\n        throw new Error(\"게시글 검색 중 에러 발생: Error searching posts\");\n    }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/posts.ts\n");

/***/ }),

/***/ "(api)/./src/pages/api/posts/[id].ts":
/*!*************************************!*\
  !*** ./src/pages/api/posts/[id].ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_posts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/posts */ \"(api)/./src/lib/posts.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_posts__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_posts__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// /pages/api/posts/[id].ts\n\nasync function handler(req, res) {\n    const { id  } = req.query;\n    try {\n        if (req.method === \"GET\" && id) {\n            // 특정 게시글 조회 로직\n            const post = await (0,_lib_posts__WEBPACK_IMPORTED_MODULE_0__.getPost)(id);\n            if (post) {\n                await (0,_lib_posts__WEBPACK_IMPORTED_MODULE_0__.incrementPostViews)(id);\n                res.status(200).json(post);\n            } else {\n                res.status(404).json({\n                    message: \"게시글을 찾을 수 없습니다\"\n                });\n            }\n        } else if (req.method === \"PUT\" && id) {\n            //게시글 업데이트\n            const { title , content  } = req.body;\n            await (0,_lib_posts__WEBPACK_IMPORTED_MODULE_0__.updatePost)(id, title, content);\n            res.status(200).json({\n                message: \"게시글 업데이트 완료: Update Post\"\n            });\n        } else if (req.method === \"DELETE\" && id) {\n            //게시글 삭제\n            await (0,_lib_posts__WEBPACK_IMPORTED_MODULE_0__.deletePost)(id);\n            res.status(200).json({\n                message: \"게시글 삭제 완료: Delete Post\"\n            });\n        } else {\n            console.log(\"Method not allowed for this request:\", req.method);\n            res.setHeader(\"Allow\", [\n                \"GET\",\n                \"PUT\",\n                \"DELETE\"\n            ]);\n            res.status(405).end(`Method ${req.method} Not Allowed`);\n        }\n    } catch (error) {\n        if (error instanceof Error) {\n            //오류가 Error 인스턴스인 경우\n            res.status(500).json({\n                message: `서버 오류: ${error.message}`\n            });\n        } else {\n            //오류 타입이 불명확한 경우\n            res.status(500).json({\n                message: \"서버 오류: Server Error\"\n            });\n        }\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvcGFnZXMvYXBpL3Bvc3RzL1tpZF0udHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSwyQkFBMkI7QUFHNkQ7QUFFekUsZUFBZUksT0FBTyxDQUFFQyxHQUFtQixFQUFFQyxHQUFvQixFQUFFO0lBQzlFLE1BQU0sRUFBRUMsRUFBRSxHQUFFLEdBQUdGLEdBQUcsQ0FBQ0csS0FBSztJQUV4QixJQUFJO1FBQ0EsSUFBSUgsR0FBRyxDQUFDSSxNQUFNLEtBQUssS0FBSyxJQUFJRixFQUFFLEVBQUU7WUFDNUIsZUFBZTtZQUNmLE1BQU1HLElBQUksR0FBRyxNQUFNVixtREFBTyxDQUFDTyxFQUFFLENBQVc7WUFDeEMsSUFBSUcsSUFBSSxFQUFFO2dCQUNOLE1BQU1ULDhEQUFrQixDQUFDTSxFQUFFLENBQVcsQ0FBQztnQkFDdkNELEdBQUcsQ0FBQ0ssTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUNGLElBQUksQ0FBQyxDQUFDO1lBQy9CLE9BQU87Z0JBQ0hKLEdBQUcsQ0FBQ0ssTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7b0JBQUVDLE9BQU8sRUFBRSxnQkFBZ0I7aUJBQUUsQ0FBQyxDQUFDO1lBQ3hELENBQUM7UUFDTCxPQUFPLElBQUlSLEdBQUcsQ0FBQ0ksTUFBTSxLQUFLLEtBQUssSUFBSUYsRUFBRSxFQUFFO1lBQ25DLFVBQVU7WUFDVixNQUFNLEVBQUVPLEtBQUssR0FBRUMsT0FBTyxHQUFFLEdBQUdWLEdBQUcsQ0FBQ1csSUFBSTtZQUNuQyxNQUFNZCxzREFBVSxDQUFDSyxFQUFFLEVBQVlPLEtBQUssRUFBRUMsT0FBTyxDQUFDLENBQUM7WUFDL0NULEdBQUcsQ0FBQ0ssTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7Z0JBQUVDLE9BQU8sRUFBRSwwQkFBMEI7YUFBQyxDQUFDLENBQUM7UUFDakUsT0FBTyxJQUFJUixHQUFHLENBQUNJLE1BQU0sS0FBSyxRQUFRLElBQUlGLEVBQUUsRUFBRTtZQUN0QyxRQUFRO1lBQ1IsTUFBTUosc0RBQVUsQ0FBQ0ksRUFBRSxDQUFXLENBQUM7WUFDL0JELEdBQUcsQ0FBQ0ssTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7Z0JBQUVDLE9BQU8sRUFBRSx3QkFBd0I7YUFBQyxDQUFDLENBQUM7UUFDL0QsT0FBTztZQUNISSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxzQ0FBc0MsRUFBRWIsR0FBRyxDQUFDSSxNQUFNLENBQUMsQ0FBQztZQUNoRUgsR0FBRyxDQUFDYSxTQUFTLENBQUMsT0FBTyxFQUFFO2dCQUFDLEtBQUs7Z0JBQUUsS0FBSztnQkFBRSxRQUFRO2FBQUMsQ0FBQyxDQUFDO1lBQ2pEYixHQUFHLENBQUNLLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ1MsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFZixHQUFHLENBQUNJLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1FBQzVELENBQUM7SUFDTCxFQUFFLE9BQU9ZLEtBQUssRUFBRTtRQUNaLElBQUlBLEtBQUssWUFBWUMsS0FBSyxFQUFFO1lBQ3hCLG9CQUFvQjtZQUNwQmhCLEdBQUcsQ0FBQ0ssTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDQyxJQUFJLENBQUM7Z0JBQUVDLE9BQU8sRUFBRSxDQUFDLE9BQU8sRUFBRVEsS0FBSyxDQUFDUixPQUFPLENBQUMsQ0FBQzthQUFDLENBQUMsQ0FBQztRQUNoRSxPQUFPO1lBQ0gsZ0JBQWdCO1lBQ2hCUCxHQUFHLENBQUNLLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO2dCQUFFQyxPQUFPLEVBQUUscUJBQXFCO2FBQUMsQ0FBQyxDQUFDO1FBQzVELENBQUM7SUFDTCxDQUFDO0FBQ0wsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3Rlc3RfZGFhbmduLy4vc3JjL3BhZ2VzL2FwaS9wb3N0cy9baWRdLnRzP2IwYTciXSwic291cmNlc0NvbnRlbnQiOlsiLy8gL3BhZ2VzL2FwaS9wb3N0cy9baWRdLnRzXHJcblxyXG5pbXBvcnQgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSAnbmV4dCc7XHJcbmltcG9ydCB7IGdldFBvc3QsIGluY3JlbWVudFBvc3RWaWV3cywgdXBkYXRlUG9zdCwgZGVsZXRlUG9zdCB9IGZyb20gJy4uLy4uLy4uL2xpYi9wb3N0cydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIgKHJlcTogTmV4dEFwaVJlcXVlc3QsIHJlczogTmV4dEFwaVJlc3BvbnNlKSB7XHJcbiAgICBjb25zdCB7IGlkIH0gPSByZXEucXVlcnk7XHJcbiAgICBcclxuICAgIHRyeSB7XHJcbiAgICAgICAgaWYgKHJlcS5tZXRob2QgPT09ICdHRVQnICYmIGlkKSB7XHJcbiAgICAgICAgICAgIC8vIO2KueyglSDqsozsi5zquIAg7KGw7ZqMIOuhnOyngVxyXG4gICAgICAgICAgICBjb25zdCBwb3N0ID0gYXdhaXQgZ2V0UG9zdChpZCBhcyBzdHJpbmcpO1xyXG4gICAgICAgICAgICBpZiAocG9zdCkge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgaW5jcmVtZW50UG9zdFZpZXdzKGlkIGFzIHN0cmluZyk7XHJcbiAgICAgICAgICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbihwb3N0KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoNDA0KS5qc29uKHsgbWVzc2FnZTogJ+qyjOyLnOq4gOydhCDssL7snYQg7IiYIOyXhuyKteuLiOuLpCcgfSk7XHJcbiAgICAgICAgICAgIH0gICAgICAgIFxyXG4gICAgICAgIH0gZWxzZSBpZiAocmVxLm1ldGhvZCA9PT0gJ1BVVCcgJiYgaWQpIHtcclxuICAgICAgICAgICAgLy/qsozsi5zquIAg7JeF642w7J207Yq4XHJcbiAgICAgICAgICAgIGNvbnN0IHsgdGl0bGUsIGNvbnRlbnQgfSA9IHJlcS5ib2R5O1xyXG4gICAgICAgICAgICBhd2FpdCB1cGRhdGVQb3N0KGlkIGFzIHN0cmluZywgdGl0bGUsIGNvbnRlbnQpO1xyXG4gICAgICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IG1lc3NhZ2U6ICfqsozsi5zquIAg7JeF642w7J207Yq4IOyZhOujjDogVXBkYXRlIFBvc3QnfSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChyZXEubWV0aG9kID09PSAnREVMRVRFJyAmJiBpZCkge1xyXG4gICAgICAgICAgICAvL+qyjOyLnOq4gCDsgq3soJxcclxuICAgICAgICAgICAgYXdhaXQgZGVsZXRlUG9zdChpZCBhcyBzdHJpbmcpO1xyXG4gICAgICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih7IG1lc3NhZ2U6ICfqsozsi5zquIAg7IKt7KCcIOyZhOujjDogRGVsZXRlIFBvc3QnfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ01ldGhvZCBub3QgYWxsb3dlZCBmb3IgdGhpcyByZXF1ZXN0OicsIHJlcS5tZXRob2QpO1xyXG4gICAgICAgICAgICByZXMuc2V0SGVhZGVyKCdBbGxvdycsIFsnR0VUJywgJ1BVVCcsICdERUxFVEUnXSk7XHJcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoNDA1KS5lbmQoYE1ldGhvZCAke3JlcS5tZXRob2R9IE5vdCBBbGxvd2VkYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xyXG4gICAgICAgICAgICAvL+yYpOulmOqwgCBFcnJvciDsnbjsiqTthLTsiqTsnbgg6rK97JqwXHJcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogYOyEnOuyhCDsmKTrpZg6ICR7ZXJyb3IubWVzc2FnZX1gfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy/smKTrpZgg7YOA7J6F7J20IOu2iOuqhe2Zle2VnCDqsr3smrBcclxuICAgICAgICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiAn7ISc67KEIOyYpOulmDogU2VydmVyIEVycm9yJ30pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdLCJuYW1lcyI6WyJnZXRQb3N0IiwiaW5jcmVtZW50UG9zdFZpZXdzIiwidXBkYXRlUG9zdCIsImRlbGV0ZVBvc3QiLCJoYW5kbGVyIiwicmVxIiwicmVzIiwiaWQiLCJxdWVyeSIsIm1ldGhvZCIsInBvc3QiLCJzdGF0dXMiLCJqc29uIiwibWVzc2FnZSIsInRpdGxlIiwiY29udGVudCIsImJvZHkiLCJjb25zb2xlIiwibG9nIiwic2V0SGVhZGVyIiwiZW5kIiwiZXJyb3IiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/posts/[id].ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./src/pages/api/posts/[id].ts"));
module.exports = __webpack_exports__;

})();